/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CharactersImport } from './routes/characters'

// Create Virtual Routes

const MoviesLazyImport = createFileRoute('/movies')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const MoviesLazyRoute = MoviesLazyImport.update({
  id: '/movies',
  path: '/movies',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/movies.lazy').then((d) => d.Route))

const CharactersRoute = CharactersImport.update({
  id: '/characters',
  path: '/characters',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/characters': {
      id: '/characters'
      path: '/characters'
      fullPath: '/characters'
      preLoaderRoute: typeof CharactersImport
      parentRoute: typeof rootRoute
    }
    '/movies': {
      id: '/movies'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof MoviesLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/characters': typeof CharactersRoute
  '/movies': typeof MoviesLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/characters': typeof CharactersRoute
  '/movies': typeof MoviesLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/characters': typeof CharactersRoute
  '/movies': typeof MoviesLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/characters' | '/movies'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/characters' | '/movies'
  id: '__root__' | '/' | '/characters' | '/movies'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  CharactersRoute: typeof CharactersRoute
  MoviesLazyRoute: typeof MoviesLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  CharactersRoute: CharactersRoute,
  MoviesLazyRoute: MoviesLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/characters",
        "/movies"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/characters": {
      "filePath": "characters.tsx"
    },
    "/movies": {
      "filePath": "movies.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
